name: Create and publish a Docker image

on:
  workflow_dispatch:
  pull_request:
      types: [opened, synchronize, reopened]
  push:
    branches:
      - "*"
    tags:
      - 'v*'
    paths-ignore:
      - '.github/dependabot.yml'
      - '.github/FUNDING.yml'
      - '.gitignore'
      - 'LICENSE'
      - '**.md'
      - '.editorconfig'
      - '.idea/**'
      - '.env_template'
      - '.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses 'docker/metadata-action' to extract tags and labels that will be applied to the specified image.
      # The 'id' "meta" allows the output of this step to be referenced in a subsequent step.
      # The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # for example: develop
            type=ref,event=branch
            # for example: pr-35
            type=ref,event=pr
            # for example: 2.3.4
            type=semver,pattern={{version}}
            # for example: 2.3
            type=semver,pattern={{major}}.{{minor}}
            # for example: 2
            type=semver,pattern={{major}}
            # set 'latest' for new tags
            type=raw,value=latest,enable=${{ startsWith( github.ref, 'refs/tags/' ) }}

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's Dockerfile.
      # If the build succeeds, it pushes the image to GitHub packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
